запуск программы: ml.exe lab6/main.asm
(у меня вариант 19 % 3 = 1 call)


прерывание BIOS 16H имеет две дополнительные
функции (AH = 3 и AH = 4), первая из которых устанавливает часто-
ту автоповтора. "Частота автоповтора" - это та частота, с которой
клавиша посылает свой код, когда  она постоянно держится нажатой.
Вторая  функция включает и выключает звуковое подтверждение нажа-
тия клавиши. Для функции 3 надо поместить в AL 0, чтобы вернуться
к  частоте автоповтора, устанавливаемой по умолчанию,  1 -  чтобы
увеличить  начальную  задержку  перед  тем,  как начинается режим
автоповтора,  2 - чтобы уменьшить частоту автоповтора вдвое, 3  -
чтобы установить свойства 1 и 2 вместе и 4 - выключить автоповтор
вообще.  Для функции 4, поместив в AL 1, Вы будете иметь звуковое
подтверждение нажатия клавиши, а 0 - выключите его.
Сначала в памяти располагаются данные и подпрограммы обработчиков прерываний,
затем секция инициализации (которая имеет точку входа INIT и именно в эту точку
передается управление при запуске программы). Основная задача секции
инициализации — установить резидент в памяти (она нужна лишь при установке
программы, потом её из памяти удаляют). Эту секцию располагают в старших адресах
(так как «обрезать» мы можем только старшие адреса).
В частности, для работы с клавиатурой задействованы порты 61h и 60h. Порт 60h
доступен для записи и обычно принимает пары байтов последовательно: первый - код
команды, второй - данные. В частности, команда F3h отвечает за параметры режима
автоповтора нажатой клавиши. Её байт данных имеет следующее значение:
7 бит (старший) - всегда 0
5,6 биты - пауза перед началом автоповтора (250, 500, 750 или 1000 мс)
4-0 биты - скорость автоповтора (от 0000b (30 символов в секунду) до 11111b - 2
символа в секунду).

; pushf можно не делать (хотя регистр флагов будет меняться и его надо сохранить), так как в конце старого обработчика 
; прерывания, который я вызываю в конце процедуры с помощью JMP (а не CALL),
; есть команда IRET, восстанавливающая то состояние регистра флагов, которое было перед вызовом прерывания (моей процедуры)

; АН = 02h — чтение времени из RTC. Возвращает время в упакованном BCD-формате: час (в регистре СН), минуту (CL),
    ; секунду (DH) и признак коррекции летнего/зимнего времени (DL = 1 — коррекция используется, DL = 0 — нет).
    ; Признаком успешной операции является флаг CF=0.
    mov ah, 02h
    ; 1Ah - прерывание BIOS для работы с таймером                                             
    int 1Ah 

(Зубков)
Команда  OF3h  ??h  -  установить  параметры  режима  автоповтора:
бит 7   второго  байта команды:  О
биты  6-5:  устанавливают  паузу  перед  началом  автоповтора:
OOb =  250ms, Olb =  500ms,  10b =  750ms, lib =  1000ms
биты   4-0:  устанавливают   скорость  автоповтора (символов  в  секунду):
ОООООЬ  =  30,0   01111Ь  =  8,000010Ь  =  24,0   10010Ь=6,000100Ь=20,0   10100Ь  =  5,0ООШЬ-  16,0  10111Ь-4,001000b=  15,0  11010Ь-3,001010b=  12,0  lllllb-2,001100b=10,0
Все  промежуточные  значения  также  имеют  смысл  и  соответствуют  промежу-точным  скоростям, например  OOOOlb  =  26,7.
Команда  OF4h  -  включить  клавиатуру.
Команда  OF5h  -  выключить  клавиатуру.
Команда  OF6h  -  установить  параметры  по  умолчанию.
Команда  OFEh  —  послать  последний  скан-код  еще  раз.
Команда   OFFh   -   выполнить   самотестирование.
Клавиатура  отвечает  на  все  команды,  кроме  OEEh  и  OFEh,  скан-кодом  OFAh(подтверждение), 
который поглощается стандартным  обработчиком  BIOS,  поэтому, если мы не замещаем его полностью,
 об обработке OFAh можно не беспокоиться.

INT 21h функция 4Сh
Тут мы просто выходим в ДОС и сообщаем ДОСу код завершения (применяется в BAT-файлах). Аналогично с return в Си.

ВХОД: AH – 4Ch AL – код завершения программы

INT 21h функция 35h
После вызова этой функции в регистрах ES и BX окажутся, соответственно, сегмент и смещение обработчика прерывания. Это нам пригодится для корректной передачи управления в ДОС после выполнения нашего алгоритма.

ВХОД: AH – 35h AL – номер прерывания ВЫХОД: ES – сегмент обработчика прерывания BX – смещение обработчика прерывания

INT 21h функция 25h
Эта функция устанавливает новый обработчик прерывания. Пользоваться надо очень осторожно и обдуманно, дабы не отстрелить себе очередную ногу.

ВХОД: AH – 25h AL – номер прерывания DS – сегмент обработчика прерывания DX – смещение обработчика прерывания

INT 27h
Завершиться, но остаться резидентным

ВХОД: DX – адрес первого байта за резидентным участком программы ВНИМАНИЕ, АХТУНГ, АЛЯРМ! 
Не 21, а 27! Да-да, именно 27. Эта функция завершает программу, оставляя резидентную часть (обработчик прерывания) в памяти.
 Т.е. она, по сути, информирует ДОС, что эта область 
памяти занята и писать туда ничего нельзя, дабы не затереть обработчик.

Кульбит с адресом системного обработчика прерывания 09h (22-23) обусловлен устройством памяти у Intel. Дело в том, что Intel использует организацию памяти «младшим-вперед» - это значит, что физически первым передается младший байт
 (little-endian). Т.к. мы передаем указатель в виде СЕГМЕНТ:СМЕЩЕНИЕ, то 
нам надо это учитывать и передавать адрес в том виде, как это принято.

Память под резидент не выделяется, а потому очищать его не надо.


возможно уложиться в одну отправку данных, если использовать регистр DX для объединения команды и данных.
В ассемблере архитектуры x86 регистры AX, BX, CX и DX являются общего назначения, что означает, что их можно использовать
 для широкого спектра операций. Однако есть некоторые соглашения о том, какие регистры следует использовать в определенных 
  ситуациях.
В данном случае выбор регистра DX для объединения команды и данных обусловлен тем, что порт 60h, куда мы отправляем команду
 и данные, принимает данные в 8-битных порциях. Регистр DX является 16-битным, и его части DX.0-DX.7 и DX.8-DX.15
  соответственно содержат младший и старший байты.
Мы используем старший байт DX для хранения команды и младший байт для хранения данных о скорости. Это позволяет нам отправить
 оба значения одним вызовом команды out, что может быть более эффективным, чем отправка их по отдельности.
mov dx, F3h             ; Загружаем команду F3h в DX
shl dx, 8               ; Сдвигаем значение влево на 8 битов
mov dl, cur_speed       ; Загружаем данные о скорости в младший байт
out 60h, dx             ; Отправляем команду и данные в порт 60h


Инструкция iret используется для выхода из обработчика прерывания и восстановления состояния процессора до момента его вызова. Она восстанавливает регистры и флаги процессора из стека, а затем передает управление обратно в программу, которая была прервана.

В данном случае, после восстановления значений регистров и флагов из стека, инструкция iret завершает выполнение обработчика прерывания и возвращает управление к месту, откуда было вызвано прерывание.

Таким образом, инструкция iret необходима для корректного завершения работы обработчика прерывания и возвращения к выполнению программы после его вызова.


Удаление программы из памяти: В exe файле операционная система отвечает за загрузку и выгрузку программы из памяти, поэтому нет необходимости использовать int 27h для выхода из программы. Поясни. То есть в exe файле нельзя сделать резидентные программы?
ChatGPT
Именно так. В exe файлах операционная система отвечает за управление процессами, включая их загрузку в память и выгрузку из нее. Резидентные программы, которые остаются в памяти после завершения своей работы, как это делается в com файлах с помощью прерывания int 27h, не являются типичными для exe файлов.

Вместо этого, в exe файлах, если программа должна остаться в памяти после завершения, она обычно должна быть написана как служба (Windows Service) или как фоновый процесс (daemon process) в Unix-подобных системах. Эти типы приложений реализуются с помощью специальных интерфейсов операционной системы и запускаются как часть операционной системы, а не как отдельные программы.

Таким образом, резидентные программы, которые остаются в памяти после завершения, типичны для com файлов, но не для exe файлов.


Практическое задание
Написать резидентную программу под DOS, которая будет каждую секунду менять
скорость автоповтора ввода символов в циклическом режиме, от самой медленной до
самой быстрой. По желанию можно реализовать другой способ взаимодействия с
устройствами через порты ввода-вывода, но такой, который можно будет
наглядно продемонстрировать на сдаче лаб. работы.
Варианты вызова предшествующего обработчика прерывания:
1. Командой дальнего вызова подпрограммы CALL в начале обработчика
прерывания с предварительным сохранением регистра флагов в стеке
Индивидуальный вариант = 19 % 3 = 1